import numpy as np
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import os

# Generate synthetic time-series data for demonstration
np.random.seed(42)
data = pd.DataFrame({
    "open": np.random.uniform(100, 200, 100),
    "high": np.random.uniform(150, 250, 100),
    "low": np.random.uniform(50, 100, 100),
    "close": np.random.uniform(100, 200, 100),
    "volume": np.random.randint(1000, 5000, 100)
})

# Adding a target column for price direction (1 for up, 0 for down)
data["target"] = (data["close"].diff().fillna(0) > 0).astype(int)

# Normalizing the data
scaler = MinMaxScaler()
data_scaled = scaler.fit_transform(data.drop(columns=["target"]))
data_scaled = pd.DataFrame(data_scaled, columns=data.columns[:-1])

# Prepare sequences for LSTM
sequence_length = 10
X, y = [], []

for i in range(sequence_length, len(data_scaled)):
    X.append(data_scaled.iloc[i-sequence_length:i].values)
    y.append(data["target"].iloc[i])

X, y = np.array(X), np.array(y)

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the LSTM model
model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])),
    Dropout(0.2),
    LSTM(50),
    Dropout(0.2),
    Dense(1, activation="sigmoid")
])

model.compile(optimizer=Adam(learning_rate=0.001), loss="binary_crossentropy", metrics=["accuracy"])

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=16, validation_data=(X_test, y_test))

# Save the trained model
file_path = "models/pre_trained/lstm_model.h5"
os.makedirs(os.path.dirname(file_path), exist_ok=True)  # Ensure directory exists
model.save(file_path)
print(f"LSTM model saved to {file_path}")
