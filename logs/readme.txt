# Logs Directory

The `logs` directory is used to store log files generated by the trading bot. These logs provide valuable information for debugging, monitoring, and analyzing the bot's performance.

## Purpose of Logs
1. **Error Tracking**: Identify issues such as API failures, connectivity problems, or unexpected behavior in the trading bot.
2. **Trade Records**: Maintain a record of trades executed, including timestamps, symbols, prices, and quantities.
3. **Performance Monitoring**: Track profit/loss and other performance metrics over time.
4. **Audit Trail**: Provide a clear audit trail for all actions taken by the bot.

## Log File Format
- **Filename**: Log files are named in the format `bot_log_YYYY-MM-DD.txt`, where `YYYY-MM-DD` is the date of the log.
- **Content Structure**:
  - **Timestamp**: When the event occurred.
  - **Log Level**: INFO, WARNING, ERROR, or DEBUG.
  - **Message**: Description of the event.

### Example Log Entry
```
2024-01-01 10:00:00 - INFO - Connected to Alpaca API successfully.
2024-01-01 10:15:00 - INFO - Executed trade: 50 shares of AAPL at $150.50.
2024-01-01 10:30:00 - ERROR - Failed to fetch penny stocks: API rate limit exceeded.
```

## Log Management
1. **Retention Policy**:
   - Logs older than 30 days should be archived or deleted to save space.
2. **Access Control**:
   - Ensure that only authorized users can access or modify log files.

## How to Use Logs
- **Real-Time Monitoring**:
  - Use `tail -f` to view logs in real-time during bot execution.
- **Error Investigation**:
  - Search for "ERROR" in log files to identify and debug issues.
- **Performance Review**:
  - Analyze "INFO" logs to assess trading performance and refine strategies.

## Log Levels
1. **INFO**: General information about bot operations, such as successful connections and executed trades.
2. **WARNING**: Non-critical issues that may require attention but do not stop the bot.
3. **ERROR**: Critical issues that prevent the bot from functioning as expected.
4. **DEBUG**: Detailed debugging information for developers.

## Troubleshooting Common Issues
1. **"Failed to connect to Alpaca API"**:
   - Check API keys in the `config.json` file.
   - Verify internet connectivity.
2. **"API rate limit exceeded"**:
   - Reduce the frequency of API calls.
   - Implement retry logic with exponential backoff.
3. **"Insufficient buying power"**:
   - Review trade allocation logic and ensure adequate funds are available.

## Notes
- Log files are critical for maintaining transparency and understanding the bot’s behavior.
- Regularly review logs to optimize the bot’s performance and reliability.


